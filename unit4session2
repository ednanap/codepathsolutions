Problem 1: Long Pressed

U - Understand

How does long pressing affect the characters in the string?
Can both strings have different lengths due to long pressing?

P - Plan

Initialize two pointers, one for name and one for typed.
Loop through both strings.
If characters at both pointers match, move both pointers.
If characters don't match, check if the current character in typed is the same as the previous character (indicating a long press).
If the above conditions fail, return False.
After the loop, ensure all characters in name are checked.

Pseudocode:

Initialize i for name and j for typed.
While j < len(typed):
If name[i] == typed[j], increment both pointers.
If typed[j] == typed[j-1], increment only j.
Else, return False.
If i != len(name), return False.
Return True.

I - Implement

def is_long_pressed(name, typed):
    i = j = 0
    while j < len(typed):
        if i < len(name) and name[i] == typed[j]:
            i += 1
        elif j > 0 and typed[j] == typed[j-1]:
            j += 1
        else:
            return False
    return i == len(name)


Problem 2: Sharing Cookies

U - Understand

How do we maximize the number of content children?
Can a cookie be given to more than one child?

P - Plan

Sort both the greed list g and the cookie list s.
Use two pointers, one for g and one for s.
If the current cookie satisfies the child's greed, assign the cookie and move both pointers.
If the cookie doesn't satisfy the child's greed, move the cookie pointer to try a larger cookie.

Pseudocode:

Sort g and s.
Initialize two pointers: i for g and j for s.
While i < len(g) and j < len(s):
If s[j] >= g[i], increment both i and j.
Else, increment j.
Return i (number of satisfied children).

I - Implement

def find_content_children(g, s):
    g.sort()
    s.sort()
    i = j = 0
    while i < len(g) and j < len(s):
        if s[j] >= g[i]:
            i += 1
        j += 1
    return i

Problem 3: Valid Palindrome

U - Understand

Can at most one character be removed to form a palindrome?
What should the function return if the string is already a palindrome?

P - Plan

Use two pointers: one at the beginning and one at the end of the string.
Move the pointers towards the middle.
If a mismatch is found, attempt to skip either character and check if the remaining substring is a palindrome.
If skipping resolves the mismatch, return True; otherwise, return False.

Pseudocode:

Define a helper function is_palindrome_range to check if a substring is a palindrome.
Use two pointers left and right.
If s[left] != s[right], check if skipping either left or right results in a valid palindrome.
Return True if valid, else False.

I - Implement

def valid_palindrome(s):
    def is_palindrome_range(i, j):
        return all(s[k] == s[j-k+i] for k in range(i, j))
    
    left, right = 0, len(s) - 1
    while left < right:
        if s[left] != s[right]:
            return is_palindrome_range(left+1, right) or is_palindrome_range(left, right-1)
        left += 1
        right -= 1
    return True

Problem 4: Positive Negative Pairs

U - Understand

What happens if no such pair exists?
Should the solution handle large positive and negative numbers?

P - Plan

Create a set to store the numbers.
Loop through the list:
If the negative of the current number exists in the set, track the maximum.
Return the maximum positive number for which its negative exists, or return -1.

Pseudocode:

Initialize max_k = -1.
Loop through nums, adding positive numbers to a set.
For each number, check if -number is in the set, and update max_k if necessary.
Return max_k.

I - Implement

def find_largest_k(nums):
    num_set = set(nums)
    max_k = -1
    for num in nums:
        if -num in num_set:
            max_k = max(max_k, abs(num))
    return max_k
Problem 5: Good Substring

U - Understand

What is the definition of a "good" substring?
Should overlapping substrings be counted separately?

P - Plan

Use a sliding window of size 3 to examine substrings.
For each substring, check if all characters are unique.
Increment the count for every good substring.

Pseudocode:

Initialize count = 0.
Loop from index 0 to len(s) - 2.
Extract the substring s[i:i+3].
If all characters are unique, increment count.
Return count.

I - Implement

def count_good_substrings(s):
    count = 0
    for i in range(len(s) - 2):
        substr = s[i:i+3]
        if len(set(substr)) == 3:
            count += 1
    return count

Problem 6: Duplicates Within Range
U - Understand

What does "within the range" mean in terms of indices?
Should duplicates beyond the given range k be considered?

P - Plan

Use a sliding window to keep track of elements within the range k.
Use a set to store elements and check for duplicates within the current window.
If a duplicate is found, return True.
Return False if no duplicates are found.

Pseudocode:

Initialize an empty set.
Loop through the list, adding elements to the set.
If the set contains an element already, return True.
If the window size exceeds k, remove the oldest element.
Return False.

I - Implement


def contains_nearby_duplicate(lst, k):
    seen = set()
    for i in range(len(lst)):
        if lst[i] in seen:
            return True
        seen.add(lst[i])
        if len(seen) > k:
            seen.remove(lst[i - k])
    return False
